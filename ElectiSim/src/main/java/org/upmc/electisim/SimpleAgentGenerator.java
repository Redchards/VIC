package org.upmc.electisim;

import java.util.ArrayList;
import java.util.List;

/**
 * <p>A simple agent generator, incrementing a simple counter to generate unique names for agents.
 * The generated names will be of the form "Ai" where "i" is a number. If the agent count is
 * very large, this method can potentially be quite costly, it being O(n^2), n being the number
 * of agents with the same naming convention as generated by this generator.</p>
 * <p>The generated agent will have empty preferences which will need to be updated.</p>
 */
public class SimpleAgentGenerator implements IAgentGenerator {

	/*
	 * (non-javadoc)
	 * The default base name for an agent
	 */
	private static final String DEFAULT_AGENT_BASE_NAME = "A";
	
	/*
	 * (non-Javadoc)
	 * Generates an agent
	 * 
	 * @see org.upmc.electisim.IAgentGenerator#generate(java.util.List, org.upmc.electisim.PreferenceType)
	 */
	@Override
	public Agent generate(List<Agent> agentList, PreferenceType type) {
		int candidateNumber = 1;
		String currentAgentName = null;
		boolean needsRecheck = true;
		
		while(needsRecheck) {
			needsRecheck = false;
			currentAgentName = (DEFAULT_AGENT_BASE_NAME + Integer.toString(candidateNumber));
			for(Agent a : agentList) {
				if(currentAgentName.equals(a.getName())) {
					needsRecheck = true;
					candidateNumber++;
					break;
				}
			}
		}
		
		return new Agent(currentAgentName, new Preferences(type, new ArrayList<>()));	
	}

}
